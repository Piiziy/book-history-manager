// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "./"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth.js 공식 권장 User 모델 예시
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // NextAuth 연동을 위해 Account 및 Session과 1:N 관계
  accounts  Account[]
  sessions  Session[]
  userBooks UserBook[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Book {
  id         String @id
  title      String
  author     String
  totalPages Int

  userBooks UserBook[]
}

model UserBook {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId String

  status     ReadingStatus
  startedAt  DateTime
  finishedAt DateTime?
  records    ReadingRecord[]

  @@unique([userId, bookId])
}

model ReadingRecord {
  id         String   @id @default(cuid())
  userBook   UserBook @relation(fields: [userBookId], references: [id], onDelete: Cascade)
  userBookId String

  date            DateTime
  pagesRead       Int
  cumulativePages Int

  @@unique([userBookId, date]) // 하루에 한 번만 기록
}

enum ReadingStatus {
  CURRENTLY_READING
  COMPLETED
}
